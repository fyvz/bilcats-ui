/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as pagesRouteRouteImport } from './routes/(pages)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CatsIndexRouteImport } from './routes/cats/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as CatsCatNameSlugRouteRouteImport } from './routes/cats/$catNameSlug/route'
import { Route as pagesChatRouteRouteImport } from './routes/(pages)/chat/route'
import { Route as CatsCatNameSlugIndexRouteImport } from './routes/cats/$catNameSlug/index'
import { Route as AdminPostAnouncementIndexRouteImport } from './routes/admin/post-anouncement/index'
import { Route as pagesChatIndexRouteImport } from './routes/(pages)/chat/index'
import { Route as authRegisterIndexRouteImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as AdminPostAnouncementRouterRouteImport } from './routes/admin/post-anouncement/router'
import { Route as pagesChatChatPageIndexRouteImport } from './routes/(pages)/chat/$chatPage/index'

const pagesRouteRoute = pagesRouteRouteImport.update({
  id: '/(pages)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CatsIndexRoute = CatsIndexRouteImport.update({
  id: '/cats/',
  path: '/cats/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const CatsCatNameSlugRouteRoute = CatsCatNameSlugRouteRouteImport.update({
  id: '/cats/$catNameSlug',
  path: '/cats/$catNameSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const pagesChatRouteRoute = pagesChatRouteRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => pagesRouteRoute,
} as any)
const CatsCatNameSlugIndexRoute = CatsCatNameSlugIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CatsCatNameSlugRouteRoute,
} as any)
const AdminPostAnouncementIndexRoute =
  AdminPostAnouncementIndexRouteImport.update({
    id: '/admin/post-anouncement/',
    path: '/admin/post-anouncement/',
    getParentRoute: () => rootRouteImport,
  } as any)
const pagesChatIndexRoute = pagesChatIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => pagesChatRouteRoute,
} as any)
const authRegisterIndexRoute = authRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)
const AdminPostAnouncementRouterRoute =
  AdminPostAnouncementRouterRouteImport.update({
    id: '/admin/post-anouncement/router',
    path: '/admin/post-anouncement/router',
    getParentRoute: () => rootRouteImport,
  } as any)
const pagesChatChatPageIndexRoute = pagesChatChatPageIndexRouteImport.update({
  id: '/$chatPage/',
  path: '/$chatPage/',
  getParentRoute: () => pagesChatRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof pagesRouteRouteWithChildren
  '/chat': typeof pagesChatRouteRouteWithChildren
  '/cats/$catNameSlug': typeof CatsCatNameSlugRouteRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/cats': typeof CatsIndexRoute
  '/admin/post-anouncement/router': typeof AdminPostAnouncementRouterRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/chat/': typeof pagesChatIndexRoute
  '/admin/post-anouncement': typeof AdminPostAnouncementIndexRoute
  '/cats/$catNameSlug/': typeof CatsCatNameSlugIndexRoute
  '/chat/$chatPage': typeof pagesChatChatPageIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof pagesRouteRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/cats': typeof CatsIndexRoute
  '/admin/post-anouncement/router': typeof AdminPostAnouncementRouterRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/chat': typeof pagesChatIndexRoute
  '/admin/post-anouncement': typeof AdminPostAnouncementIndexRoute
  '/cats/$catNameSlug': typeof CatsCatNameSlugIndexRoute
  '/chat/$chatPage': typeof pagesChatChatPageIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(pages)': typeof pagesRouteRouteWithChildren
  '/(pages)/chat': typeof pagesChatRouteRouteWithChildren
  '/cats/$catNameSlug': typeof CatsCatNameSlugRouteRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/cats/': typeof CatsIndexRoute
  '/admin/post-anouncement/router': typeof AdminPostAnouncementRouterRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/(pages)/chat/': typeof pagesChatIndexRoute
  '/admin/post-anouncement/': typeof AdminPostAnouncementIndexRoute
  '/cats/$catNameSlug/': typeof CatsCatNameSlugIndexRoute
  '/(pages)/chat/$chatPage/': typeof pagesChatChatPageIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/cats/$catNameSlug'
    | '/admin'
    | '/cats'
    | '/admin/post-anouncement/router'
    | '/login'
    | '/register'
    | '/chat/'
    | '/admin/post-anouncement'
    | '/cats/$catNameSlug/'
    | '/chat/$chatPage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/cats'
    | '/admin/post-anouncement/router'
    | '/login'
    | '/register'
    | '/chat'
    | '/admin/post-anouncement'
    | '/cats/$catNameSlug'
    | '/chat/$chatPage'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(pages)'
    | '/(pages)/chat'
    | '/cats/$catNameSlug'
    | '/admin/'
    | '/cats/'
    | '/admin/post-anouncement/router'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/(pages)/chat/'
    | '/admin/post-anouncement/'
    | '/cats/$catNameSlug/'
    | '/(pages)/chat/$chatPage/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  pagesRouteRoute: typeof pagesRouteRouteWithChildren
  CatsCatNameSlugRouteRoute: typeof CatsCatNameSlugRouteRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
  CatsIndexRoute: typeof CatsIndexRoute
  AdminPostAnouncementRouterRoute: typeof AdminPostAnouncementRouterRoute
  AdminPostAnouncementIndexRoute: typeof AdminPostAnouncementIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(pages)': {
      id: '/(pages)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cats/': {
      id: '/cats/'
      path: '/cats'
      fullPath: '/cats'
      preLoaderRoute: typeof CatsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cats/$catNameSlug': {
      id: '/cats/$catNameSlug'
      path: '/cats/$catNameSlug'
      fullPath: '/cats/$catNameSlug'
      preLoaderRoute: typeof CatsCatNameSlugRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(pages)/chat': {
      id: '/(pages)/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof pagesChatRouteRouteImport
      parentRoute: typeof pagesRouteRoute
    }
    '/cats/$catNameSlug/': {
      id: '/cats/$catNameSlug/'
      path: '/'
      fullPath: '/cats/$catNameSlug/'
      preLoaderRoute: typeof CatsCatNameSlugIndexRouteImport
      parentRoute: typeof CatsCatNameSlugRouteRoute
    }
    '/admin/post-anouncement/': {
      id: '/admin/post-anouncement/'
      path: '/admin/post-anouncement'
      fullPath: '/admin/post-anouncement'
      preLoaderRoute: typeof AdminPostAnouncementIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(pages)/chat/': {
      id: '/(pages)/chat/'
      path: '/'
      fullPath: '/chat/'
      preLoaderRoute: typeof pagesChatIndexRouteImport
      parentRoute: typeof pagesChatRouteRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/admin/post-anouncement/router': {
      id: '/admin/post-anouncement/router'
      path: '/admin/post-anouncement/router'
      fullPath: '/admin/post-anouncement/router'
      preLoaderRoute: typeof AdminPostAnouncementRouterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(pages)/chat/$chatPage/': {
      id: '/(pages)/chat/$chatPage/'
      path: '/$chatPage'
      fullPath: '/chat/$chatPage'
      preLoaderRoute: typeof pagesChatChatPageIndexRouteImport
      parentRoute: typeof pagesChatRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface pagesChatRouteRouteChildren {
  pagesChatIndexRoute: typeof pagesChatIndexRoute
  pagesChatChatPageIndexRoute: typeof pagesChatChatPageIndexRoute
}

const pagesChatRouteRouteChildren: pagesChatRouteRouteChildren = {
  pagesChatIndexRoute: pagesChatIndexRoute,
  pagesChatChatPageIndexRoute: pagesChatChatPageIndexRoute,
}

const pagesChatRouteRouteWithChildren = pagesChatRouteRoute._addFileChildren(
  pagesChatRouteRouteChildren,
)

interface pagesRouteRouteChildren {
  pagesChatRouteRoute: typeof pagesChatRouteRouteWithChildren
}

const pagesRouteRouteChildren: pagesRouteRouteChildren = {
  pagesChatRouteRoute: pagesChatRouteRouteWithChildren,
}

const pagesRouteRouteWithChildren = pagesRouteRoute._addFileChildren(
  pagesRouteRouteChildren,
)

interface CatsCatNameSlugRouteRouteChildren {
  CatsCatNameSlugIndexRoute: typeof CatsCatNameSlugIndexRoute
}

const CatsCatNameSlugRouteRouteChildren: CatsCatNameSlugRouteRouteChildren = {
  CatsCatNameSlugIndexRoute: CatsCatNameSlugIndexRoute,
}

const CatsCatNameSlugRouteRouteWithChildren =
  CatsCatNameSlugRouteRoute._addFileChildren(CatsCatNameSlugRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  pagesRouteRoute: pagesRouteRouteWithChildren,
  CatsCatNameSlugRouteRoute: CatsCatNameSlugRouteRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
  CatsIndexRoute: CatsIndexRoute,
  AdminPostAnouncementRouterRoute: AdminPostAnouncementRouterRoute,
  AdminPostAnouncementIndexRoute: AdminPostAnouncementIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
